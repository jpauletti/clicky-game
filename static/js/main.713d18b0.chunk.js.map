{"version":3,"sources":["components/Header/index.js","components/Images/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","score","topScore","react_default","a","createElement","className","this","props","Component","gameOver","characters","randomizedChars","Images","status","_characters","malfoy","neville","hermione","snape","Object","defineProperty","checkClickedAll","key","_this","console","log","randomizeCharacters","lastRandom","i","length","number","Math","floor","random","indexOf","push","messageChange","color","gameover","document","getElementsByClassName","style","setTimeout","winningMessage","message","setState","classList","add","userChoseImage","event","character","target","id","alreadyClicked","firstClick","updatedChars","scoreUp","updateTopScore","_characters2","scoreReset","_this2","Fragment","onChange","map","concat","data-clicked","onClick","App","currentScore","components_Header","components_Images","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.713d18b0.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\nclass Header extends Component {\n    state = {\n        score: 0,\n        topScore: 0\n    }\n\n\n    render() {\n        return (\n            <div className=\"jumbotron text-center\">\n                <h1 className=\"display-4\">Clicky Game</h1>\n                <p className=\"lead\">Score: {this.props.score}  |  Top Score: {this.props.topScore}</p>\n                <p>Click on an image to earn points, but only click each image once.</p>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./style.css\";\n\nlet score = 0;\nlet gameOver= false;\nlet characters = [\n    \"harry\", \"malfoy\", \"hermione\", \"snape\", \"neville\", \"tonks\", \"remus\", \"ron\", \"dumbledore\", \"luna\", \"madEye\", \"fleur\"\n]\nlet randomizedChars = characters;\n\nclass Images extends Component {\n\n    state = {\n        status: \"\",\n        characters: {\n            malfoy: false,\n            neville: false,\n            hermione: false,\n            snape: false,\n            neville: false,\n            tonks: false,\n            remus: false,\n            ron: false,\n            dumbledore: false,\n            luna: false,\n            madEye: false,\n            fleur: false\n        }\n    }\n\n\n    checkClickedAll = () => {\n        // check to see if all characters have been clicked\n        let clickedAll = false;\n        // console.log(this.state.characters);\n        for (var key in this.state.characters) {\n            if (this.state.characters[key] === false) {\n                // console.log(false); \n                console.log(\"not all clicked\")\n                return false;\n            }\n        }\n        clickedAll = true;\n        console.log(\"all clicked\")\n        return clickedAll;\n\n    }\n\n    randomizeCharacters = () => {\n        let lastRandom = randomizedChars;\n        randomizedChars = [];\n        for (let i = 0; i < characters.length; i++) {\n            let number = Math.floor(Math.random() * characters.length);\n\n            while (randomizedChars.indexOf(characters[number]) > -1) {\n                // console.log(\"regenerate\")\n                number = Math.floor(Math.random() * characters.length);\n                // console.log(number);\n            }\n\n            if (randomizedChars.indexOf(characters[number]) === -1) {\n                randomizedChars.push(characters[number]);\n            }\n        }\n\n        if (lastRandom === randomizedChars) {\n            this.randomizeCharacters();\n        }\n\n    }\n\n    messageChange = (color, gameover) => {\n        // change color of message\n        document.getElementsByClassName(\"message\")[0].style.color = color;\n        if (!gameover) {\n            // change back to black if game is still going\n            setTimeout(function () {\n                document.getElementsByClassName(\"message\")[0].style.color = \"#212529\";\n            }, 250);\n        }\n    }\n\n\n    winningMessage = (message) => {\n        // change message to tell user they won\n        this.setState({\n            status: message\n        });\n        document.getElementsByClassName(\"message\")[0].classList.add(\"winning\");\n    }\n\n\n    userChoseImage = event => {\n        let character = event.target.id;\n\n        // has this image been clicked already?\n        if (this.state.characters[character]) {\n            this.alreadyClicked();\n        } else {\n            this.firstClick(character);\n        }\n    }\n\n\n    firstClick = (character) => {\n        // set state to true\n        let updatedChars = this.state.characters;\n        updatedChars[character] = true;\n\n        this.setState({\n            characters: updatedChars\n        });\n\n        // increase score by one\n        this.props.scoreUp();\n        score++;\n        // update topScore if your new score is higher\n        this.props.updateTopScore(score);\n\n        // has user clicked all the images?\n        if (this.checkClickedAll()) {\n            // show winning message\n            this.winningMessage(\"YOU WON!\");\n        } else {\n            gameOver = false;\n            // console.log(\"good job - new image\")\n\n            // message - guessed right\n            this.setState({\n                status: \"Good job!\"\n            });\n\n            // change message color to green temporarily\n            this.messageChange(\"green\", gameOver);\n\n            // randomize image placement\n            this.randomizeCharacters();\n        }\n    }\n\n\n    alreadyClicked = () => {\n        // console.log(\"already clicked it\")\n        // reset score\n        this.props.scoreReset();\n        score = 0;\n\n        // game over - message - guessed wrong\n        this.setState({\n            status: \"You already clicked that image! Click an image to start the game again.\"\n        });\n\n        gameOver = true;\n\n        // change message color to red\n        this.messageChange(\"red\", gameOver);\n\n        // reset image clicked states\n        this.setState({\n            characters: {\n                malfoy: false,\n                neville: false,\n                hermione: false,\n                snape: false,\n                neville: false,\n                tonks: false,\n                remus: false,\n                ron: false,\n                dumbledore: false,\n                luna: false,\n                madEye: false,\n                fleur: false\n            }\n        });\n\n        // randomize characters/images\n        this.randomizeCharacters();\n    }\n\n\n    render() {\n        return (\n            <>\n                <div className=\"row text-center mb-4\">\n                    <div className=\"col-md-12 font-weight-bold message\" onChange={this.messageChange}>\n                        {gameOver ? <div>GAME OVER.</div> : \"\"}\n                        {this.state.status}\n                    </div>\n                </div>\n                <div className=\"row image-board ml-auto mr-auto mb-4\">\n                    {randomizedChars.map(character => (\n                    <div className=\"col-md-3 char\" key={character}>\n                        <div className={`image-bg ${character}`} id={character} data-clicked={this.state.characters[character]} onClick={this.userChoseImage}></div>\n                    </div>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\n\nexport default Images;\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Images from './components/Images';\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    score: 0,\n    topScore: 0\n  };\n\n  scoreUp = () => {\n    this.setState({\n      score: this.state.score + 1\n    });\n  }\n\n  scoreReset = () => {\n    this.setState({\n      score: 0\n    });\n  }\n\n  updateTopScore = (currentScore) => {\n    if (currentScore > this.state.topScore) {\n      this.setState({\n        topScore: currentScore\n      });\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Header score={this.state.score} topScore={this.state.topScore} />\n        <div className=\"container\">\n          <Images score={this.state.score} topScore={this.state.topScore} scoreUp={this.scoreUp} scoreReset={this.scoreReset} updateTopScore={this.updateTopScore} />\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}